function [ data,labels ] = PointAnomalyGen( k,d,c,rangeOfMU,rangeOfSIGMA,noa )
%#####################################################################
%# Synthetic Data Generator for Point Anomaly                        #
%# Programers: Jing-Yao Lin                                          #
%#                                                                   #
%# Please send comments and suggestions to                           #
%# "jyl.ntust@gmail.com"                                             #
%#                                                                   #
%# Inputs                                                            #
%#   k: Number of normal output points                               #
%# (optional)                                                        #
%#   d: Dimensionality of output points                              #
%#   c: Number of distributions                                      #
%#   rangeOfMU: The range of random mean of the Gaussian(optional)   #
%#   rangeOfSIGMA: The range of random variance of the Gaussian      #
%#   noa: Number of Anomalies in Output Points                       #
%#                                                                   #
%# Outputs                                                           #
%#   data: the output of synthetic data, where the dimensionality    #
%#   will be (k+noa)¡ÑD.                                              #
%#                                                                   #
%# Example:                                                          #
%#   PointAnomalyGen( 1000,100,5,[-10 10] ,[1 8]);                   #
%#                                                                   #
%#   This synthetic data generator is inspired by [1]. In the        #
%#   paper, their initial definition defines that, an outlier is a   #
%#   point being generated by a different mechanism than the majority#
%#   of data objects. In this program, similar to the mentioned      #
%#   paper, the major mechanism of points are multivariate           #
%#   guassian distribution. Given parameters, this program will      #
%#   generate k points based on c Gaussian distributions of different#
%#   random mean and random vaiance.                                 #
%#                                                                   #
%#   [1] Kriegel, Hans-Peter, and Arthur Zimek. "Angle-based outlier #
%#   detection in high-dimensional data." Proceedings of the 14th    #
%#   ACM SIGKDD international conference on Knowledge discovery and  #
%#   data mining. ACM, 2008.                                         #
%#####################################################################
    if nargin<2
        d=100;
    elseif d<2
        error('D must be larger than 2'); 
    end    
    if nargin<3
        c=5;
    end    
    if nargin<4
        MU = rand(c,d)*10;  
        
    else
        MU = rand(c,d)*(rangeOfMU(2)-rangeOfMU(1))+rangeOfMU(1);    
    end
    if nargin<5
        rangeOfMU = [1 10];
%         SIGMA = rand(1,d,5)*(rangeOfMU(2)-rangeOfMU(1)).^0.5;
        SIGMA = rand(1,d,c)*(rangeOfMU(2)-rangeOfMU(1))*0.25;
    else
        SIGMA = rand(1,d,c)*(rangeOfSIGMA(2)-rangeOfSIGMA(1))+rangeOfSIGMA(1);
         
    end    
    if nargin<6
        noa=10;
    end
    p = ones(1,c)/c;
    obj = gmdistribution(MU,SIGMA,p);
    Y = random(obj,k);    
    data=[Y; rand(noa,d)*(rangeOfMU(2)-rangeOfMU(1))+rangeOfMU(1)];
    if d>3
        plot3(data(1:end-noa-1,1),data(1:end-noa-1,2),data(1:end-noa-1,3),'.');
        hold on;
        plot3(data(end-noa:end,1),data(end-noa:end,2),data(end-noa:end,3),'r.');
    elseif d==2   
        plot(data(1:end-noa-1,1),data(1:end-noa-1,2),'.');
        hold on;
        plot(data(end-noa:end,1),data(end-noa:end,2),'r.');
    end 
    labels = [zeros(k,1); ones(noa,1)];
end

